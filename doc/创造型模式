特点：这类模式提供创建对象的机制，能够提升已有代码的灵活性和可复用型。

1、工厂方法
业务场景：
  模拟发放多种奖品
实现要点：
  a.定义一个创建对象的接口（可以保证入参和输入的统一性）
  b.子类进行具体的业务实现
  c.创建工厂Factory，根据业务类型返回不同的子类实现
大白话：
  原来在俺家乡存在三个大的物流公司，分别是海上物流公司，陆上物流公司，空中物流公司，消费者寄东西需要
  根据寄送的内容或自己的需要（业务类型 / if-else），到对应的物流公司进行寄送。
  后来来了一个大的资本，成立了一个总的物流公司，通过融资收购了三家物流公司，后来消费者寄送东西，只需要到
  总物流公司说明自己的需要即可，然后总公司分发给其子公司去寄送就好
特点：
  定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。
  避免创建者与具体的产品逻辑耦合，满足单一职责。
  每一个业务逻辑都在属于自己的类中完成，满足开闭原则，无需调用方修改即可在程序中引入新的业务类型。
优点：
  提高代码结构的扩展性，降低代码耦合，屏蔽每一个功能类的具体实现逻辑，让外部只关注调用就好，同时，可以去除大量的if-else
缺点：
  当场景非常多的时候，需要实现的类非常多，后期维护成本高

2、抽象工厂
业务场景：
  替换Redis双集群升级，代理类抽象场景
实现要点：
  提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。

3、建造者
业务场景：
  各项装修物料组合套餐选配场景
实现要点：
  将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。

4、原型
业务场景：
  上机考试多套试题，每人题目和答案乱序排列的场景
实现要点：
  用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。

5、单例
业务场景：
  数据库连接池
个人理解：
  当一个类被全局使用，并且频繁的被创建和消费，则可以考虑使用单例模式，保证该类只有一个实例，从而提升整体代码的性能。
实现要点：
  a.私有化属性
  b.私有化构造方法
  c.提供全局访问接口
选取考量：
  1、是否支持懒汉模式；2、是否线程安全；3、性能损耗
常用的实现方法以及优缺点
a.懒汉模式
支持懒加载;线程不安全
b.线程安全的懒汉模式
支持懒加载;线程安全;存在锁损耗
c.饿汉模式
不支持懒加载;线程安全;存在锁损耗
d.静态内部类模式-推荐
支持懒加载;线程安全;不存在锁损耗
e.双重检锁模式
支持懒加载;线程安全;优化了锁损耗
f.CAS模式
支持懒加载;线程安全;可能会忙等死循环;依赖CAS
g.枚举模式-最推荐
支持懒加载;线程安全;优化了锁损耗;不支持继承
